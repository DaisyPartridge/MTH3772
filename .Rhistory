con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
reticulate::repl_python()
for con in duckdb.list_connections():
con.close()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from pins import board_temp
from pins import board_folder
from vetiver import VetiverModel, vetiver_pin_write
from vetiver import VetiverAPI
from pins import board_create, board_write, board_read
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
# Create a VetiverModel
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = board_read(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df_db = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from pins import board_temp
from pins import board_folder
from vetiver import VetiverModel, vetiver_pin_write
from vetiver import VetiverAPI
from pins import board_create, board_write, board_read
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
# Create a VetiverModel
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = board_read(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df_db = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
import duckdb
from palmerpenguins import penguins
#con = duckdb.connect('my-db.duckdb')
#df = penguins.load_penguins()
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con.close()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverModel, vetiver_pin_write
from vetiver import VetiverAPI
from pins import board_folder
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
# Create a VetiverModel
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = board_folder(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df_db = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df_db = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df_db = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
quit
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
# Close all active database connections (if any)
for con in duckdb.list_connections():
con.close()
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df_db = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
vetiver.prepare_docker(model_board, "penguins")
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
from vetiver import prepare_docker
prepare_docker(model_board, "penguins")
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
from vetiver import prepare_docker
prepare_docker(b, "penguins")
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverModel, vetiver_pin_write
from vetiver import VetiverAPI
from pins import board_folder
from vetiver import VetiverModel, vetiver_pin_write
import duckdb
import pandas as pd
from sklearn.linear_model import LinearRegression
# Load and preprocess your data
df = penguins.load_penguins().dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first=True)
y = df['body_mass_g']
# Train your model
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Create a VetiverModel
b = board_folder('data/model', allow_pickle_read=True)
# Write the VetiverModel to the pin
vetiver_pin_write(b, v)
# Now you can read the VetiverModel from the pin
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for the VetiverModel
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
#http://localhost:8080
import duckdb
# Establish a connection to the DuckDB database
con = duckdb.connect(database='my-db.duckdb')
# Execute the SQL query, fetch the result into a DataFrame, and drop NaN values
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
# Close the connection
con.close()
from vetiver import prepare_docker
prepare_docker(b, "penguin_model")
prepare_docker(b, "penguin_model")
quit
# Load required libraries
library(DBI)
library(dplyr)
library(ggplot2)
library(palmerpenguins)
library(duckdb)
# Disconnect and reconnect to DuckDB
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Query the "penguins" table from the database
df_from_db <- tbl(con, "penguins") %>% collect()
# Perform data summarization by species and sex
summary_table <- df_from_db %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
collect()
# Display the summary table
knitr::kable(summary_table)
# Perform data visualization: Penguin Size vs Mass by Species
df_from_db %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Disconnect from the database when done
dbDisconnect(con, shutdown = TRUE)
DBI::dbDisconnect(con, shutdown = TRUE)
shiny::runApp('ShinyMTH377')
runApp('ShinyMTH377')
runApp('ShinyMTH377')
runApp('ShinyMTH377')
DBI::dbDisconnect(con, shutdown = TRUE)
shiny::runApp('ShinyMTH377')
runApp('ShinyMTH377')
runApp('ShinyMTH377')
runApp('ShinyMTH377')
1 + 1
